#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var execa_1 = __importDefault(require("execa"));
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var node_fetch_1 = __importDefault(require("node-fetch"));
var isomorphic_git_1 = __importDefault(require("isomorphic-git"));
var chalk_1 = __importDefault(require("chalk"));
var jsonfile_1 = __importDefault(require("jsonfile"));
var os_1 = require("os");
function initializeGitRepository(dir) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 4]);
                    return [4 /*yield*/, isomorphic_git_1.default.currentBranch({ fs: fs_1.default, dir: dir })];
                case 1:
                    _b.sent();
                    return [3 /*break*/, 4];
                case 2:
                    _a = _b.sent();
                    // ... probably not a git repository
                    return [4 /*yield*/, isomorphic_git_1.default.init({ fs: fs_1.default, dir: dir })];
                case 3:
                    // ... probably not a git repository
                    _b.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function bootstrapPackageJson(dir) {
    return __awaiter(this, void 0, void 0, function () {
        var baseJson, packageFile, packageJson;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    baseJson = {
                        scripts: { prepare: "tsc", build: "tsc", start: "ts-node src/index.ts" },
                        husky: {
                            hooks: {
                                "pre-commit": "pretty-quick --staged",
                            },
                        },
                    };
                    process.stdout.write("Bootstrapping " + chalk_1.default.red("package.json") + " ... ");
                    return [4 /*yield*/, execa_1.default("npm", ["init", "--yes"])];
                case 1:
                    _a.sent();
                    packageFile = path_1.default.resolve(dir, "package.json");
                    return [4 /*yield*/, jsonfile_1.default.readFile(packageFile)];
                case 2:
                    packageJson = _a.sent();
                    Object.assign(packageJson, baseJson);
                    return [4 /*yield*/, jsonfile_1.default.writeFile(packageFile, packageJson)];
                case 3:
                    _a.sent();
                    process.stdout.write("Done" + os_1.EOL);
                    return [2 /*return*/];
            }
        });
    });
}
function installTypescript(nodeVersion) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.stdout.write("Installing " + chalk_1.default.red("typescript") + " ... ");
                    return [4 /*yield*/, execa_1.default("npm", [
                            "install",
                            "typescript",
                            nodeVersion ? "@types/node@" + nodeVersion : "@types/node",
                            "ts-node",
                            "--save-dev",
                        ])];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, execa_1.default("npx", ["tsc", "--init", "--outDir", "build"])];
                case 2:
                    _a.sent();
                    process.stdout.write("Done" + os_1.EOL);
                    return [2 /*return*/];
            }
        });
    });
}
function automatedCodeFormatting() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.stdout.write("Installing " + chalk_1.default.red("prettier / pretty-quick") + " ... ");
                    return [4 /*yield*/, execa_1.default("npm", [
                            "install",
                            "prettier",
                            "pretty-quick",
                            "husky",
                            "--save-dev",
                        ])];
                case 1:
                    _a.sent();
                    process.stdout.write("Done" + os_1.EOL);
                    return [2 /*return*/];
            }
        });
    });
}
function installedManagedDependencies(nodeVersion) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.stdout.write("Installing " + chalk_1.default.red("managed dependencies") + " ... ");
                    return [4 /*yield*/, execa_1.default("npm", [
                            "install",
                            nodeVersion
                                ? "create-typescript-project-dependencies@nodejs-v" + nodeVersion
                                : "create-typescript-project-dependencies",
                            "--save-dev",
                        ])];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, execa_1.default("npx", ["tsc", "--init", "--outDir", "build"])];
                case 2:
                    _a.sent();
                    process.stdout.write("Done" + os_1.EOL);
                    return [2 /*return*/];
            }
        });
    });
}
function bootstrapGitignore() {
    return __awaiter(this, void 0, void 0, function () {
        var dest, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.stdout.write("Bootstrapping " + chalk_1.default.red(".gitignore") + " ... ");
                    dest = fs_1.default.createWriteStream(".gitignore");
                    return [4 /*yield*/, node_fetch_1.default("https://gitignore.io/api/node,macos")];
                case 1:
                    res = _a.sent();
                    dest.write("build/\r\n\r\n");
                    res.body.pipe(dest);
                    process.stdout.write("Done" + os_1.EOL);
                    return [2 /*return*/];
            }
        });
    });
}
function bootstrapSampleCode(dir) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            process.stdout.write("Bootstrapping " + chalk_1.default.red("'hello world'-sample") + " ... ");
            fs_1.default.mkdirSync(dir + "/src");
            fs_1.default.writeFileSync(dir + "/src/index.ts", "// happy coding ðŸ‘»" + os_1.EOL + 'console.log("hello world");');
            process.stdout.write("Done" + os_1.EOL);
            return [2 /*return*/];
        });
    });
}
function stageFiles(dir) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    process.stdout.write("Staging " + chalk_1.default.red("files") + " ... ");
                    return [4 /*yield*/, isomorphic_git_1.default.add({ fs: fs_1.default, dir: dir, filepath: ".gitignore" })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, isomorphic_git_1.default.add({ fs: fs_1.default, dir: dir, filepath: "package.json" })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, isomorphic_git_1.default.add({ fs: fs_1.default, dir: dir, filepath: "package-lock.json" })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, isomorphic_git_1.default.add({ fs: fs_1.default, dir: dir, filepath: "tsconfig.json" })];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, isomorphic_git_1.default.add({ fs: fs_1.default, dir: dir, filepath: "src/index.ts" })];
                case 5:
                    _a.sent();
                    process.stdout.write("Done" + os_1.EOL);
                    return [2 /*return*/];
            }
        });
    });
}
function happyHacking() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            process.stdout.write(os_1.EOL + "Happy hacking! ðŸ‘½ ðŸ‘» ðŸ˜ƒ" + os_1.EOL);
            return [2 /*return*/];
        });
    });
}
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var matchedVersion, nodeVersion, dir, managed;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                matchedVersion = process.version.match(/v?([0-9]+)\..*/);
                nodeVersion = matchedVersion ? matchedVersion[1] : undefined;
                dir = process.cwd();
                managed = process.argv.length > 2 && process.argv[2] === "--managed";
                return [4 /*yield*/, initializeGitRepository(dir)];
            case 1:
                _a.sent();
                return [4 /*yield*/, bootstrapPackageJson(dir)];
            case 2:
                _a.sent();
                if (!managed) return [3 /*break*/, 4];
                return [4 /*yield*/, installedManagedDependencies(nodeVersion)];
            case 3:
                _a.sent();
                return [3 /*break*/, 7];
            case 4: return [4 /*yield*/, installTypescript(nodeVersion)];
            case 5:
                _a.sent();
                return [4 /*yield*/, automatedCodeFormatting()];
            case 6:
                _a.sent();
                _a.label = 7;
            case 7: return [4 /*yield*/, bootstrapGitignore()];
            case 8:
                _a.sent();
                return [4 /*yield*/, bootstrapSampleCode(dir)];
            case 9:
                _a.sent();
                return [4 /*yield*/, stageFiles(dir)];
            case 10:
                _a.sent();
                return [4 /*yield*/, happyHacking()];
            case 11:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); })();
//# sourceMappingURL=index.js.map