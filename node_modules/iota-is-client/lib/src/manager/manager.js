"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manager = void 0;
const mongodb_1 = require("mongodb");
const crypto = require("crypto");
// const { MongoClient } = require("mongodb");
class Manager {
    constructor(mongoURL, databaseName, secretKey) {
        this.mongoURL = mongoURL;
        this.databaseName = databaseName;
        this.secretKey = secretKey;
        this.client = new mongodb_1.MongoClient(mongoURL);
    }
    getRootIdentity() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.connect();
            const database = this.client.db(this.databaseName);
            const identities = database.collection('identity-docs');
            let identity = yield identities.findOne({});
            yield this.decrypt(identity, this.secretKey);
            return identity;
        });
    }
    decrypt(identity, secret) {
        var _a;
        let cipher = (_a = identity === null || identity === void 0 ? void 0 : identity.key) === null || _a === void 0 ? void 0 : _a.secret;
        const algorithm = 'aes-256-ctr';
        const splitted = cipher.split(',');
        const iv = splitted[0];
        const hash = splitted[1];
        const decipher = crypto.createDecipheriv(algorithm, secret, Buffer.from(iv, 'hex'));
        const decrpyted = Buffer.concat([decipher.update(Buffer.from(hash, 'hex')), decipher.final()]);
        identity.key.secret = decrpyted.toString();
    }
}
exports.Manager = Manager;
//# sourceMappingURL=manager.js.map