import { Subscription as SubscriptionInternal, SubscriptionUpdate } from '../models/types/subscription';
import { ClientConfig } from '../models/types/clientConfig';
import { Base } from './base';
import { AuthorizeSubscriptionBody, AuthorizeSubscriptionResponse, RequestSubscriptionBody, RequestSubscriptionResponse, RevokeSubscriptionBody } from '../models/types/request-response-bodies';
export declare class Subscription extends Base {
    constructor(config: ClientConfig);
    /**
     * Get all subscriptions of a channel. Use the is-authorized query parameter to filter for authorized subscriptions.
     * @param channelAddress
     * @param isAuthorized
     * @returns
     */
    findAll(channelAddress: string, isAuthorized?: boolean): Promise<SubscriptionInternal[]>;
    /**
     * Get a subscription of a channel by identity id.
     * @param channelAddress
     * @param identityId
     * @returns
     */
    find(channelAddress: string, identityId: string): Promise<SubscriptionInternal>;
    /**
     * Request subscription to a channel with address channel-address. A client can request a subscription to a channel which it then is able to read/write from.
     * @param channelAddress
     * @param options
     * @returns
     */
    request(channelAddress: string, options: RequestSubscriptionBody): Promise<RequestSubscriptionResponse>;
    /**
     * Authorize a subscription to a channel with address channel-address. The author of a channel can authorize a subscriber to read/write from a channel. Eventually after verifying its identity (using the Ecommerce-SSI Bridge).
     * @param channelAddress
     * @param authorization
     * @returns
     */
    authorize(channelAddress: string, subscriptionIdentifier: AuthorizeSubscriptionBody): Promise<AuthorizeSubscriptionResponse>;
    /**
     * Revoke subscription to a channel. Only the author of a channel can revoke a subscription from a channel.
     * @param channelAddress
     * @param subscriptionIdentifier
     * @returns
     */
    revoke(channelAddress: string, subscriptionIdentifier: RevokeSubscriptionBody): Promise<null>;
    /**
     * Adds an existing subscription (e.g. the subscription was not created with the api but locally.)
     * @param channelAddress
     * @param identityId
     * @param subscription
     * @returns
     */
    add(channelAddress: string, identityId: string, subscription: SubscriptionInternal): Promise<SubscriptionInternal>;
    /**
     * Updates an existing subscription.
     * @param channelAddress
     * @param identityId
     * @param updatedSubscription
     * @returns
     */
    update(channelAddress: string, identityId: string, updatedSubscription: SubscriptionUpdate): Promise<null>;
    /**
     * Deletes an existing subscription.
     * @param channelAddress
     * @param identityId
     * @returns
     */
    remove(channelAddress: string, identityId: string): Promise<null>;
}
//# sourceMappingURL=subscription.d.ts.map